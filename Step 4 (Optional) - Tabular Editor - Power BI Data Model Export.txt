var header = "Type,Table,Name,FormatString,DisplayFolder,Description,IsHidden,Expression,ModelAsOfDate,ModelName\n";

string modelName = "YourModelName"; // Replace 'YourModelName' with your actual model name

string FormatCsvField(string field) {
    if (string.IsNullOrEmpty(field)) {
        return "\"\""; // Return an empty quoted string if the field is null or empty
    }
    return "\"" + field.Replace("\"", "\"\"") + "\""; // Encloses field in double quotes and escapes existing double quotes
}

// A helper function to safely process a collection and avoid rows with only empty fields
string ProcessCollection<T>(IEnumerable<T> collection, Func<T, string[]> selector) {
    if (collection == null || !collection.Any()) return null;

    var processedLines = collection.Select(m => string.Join(",", selector(m))).Where(line => !string.IsNullOrWhiteSpace(line)).ToList();

    if (processedLines.Count == 0) {
        return null; // Return null if the processed collection is entirely empty
    }
    
    return string.Join("\n", processedLines);
}

string GetCurrentDateString() {
    return DateTime.Now.ToString("yyyy-MM-dd"); // Formats the current date
}

// Process CalculationGroups
var calculationgroupData = string.Join("\n",
    Model.CalculationGroups.Select(m => string.Join(",", new string[]{
        FormatCsvField(m.ObjectType.ToString()),
        "", // Table is not applicable for CalculationGroups
        FormatCsvField(m.Name),
        "", // FormatString is not applicable for CalculationGroups
        "", // DisplayFolder is not applicable for CalculationGroups
        FormatCsvField(m.Description),
        FormatCsvField(m.IsHidden.ToString()),
        "",  // Expression is not applicable for CalculationGroups
        FormatCsvField(GetCurrentDateString()), // Adding the current date
 	FormatCsvField(modelName) // Adding the model name
    }))
);

// Process AllColumns
var columnsData = string.Join("\n",
    Model.AllColumns.Select(m => string.Join(",", new string[]{
        FormatCsvField(m.ObjectType.ToString()),
        FormatCsvField(m.Table.Name),
        FormatCsvField(m.Name),
        FormatCsvField(m.FormatString),
        FormatCsvField(m.DisplayFolder),
        FormatCsvField(m.Description),
        FormatCsvField(m.IsHidden.ToString()),
        "",  // Expression is not applicable for AllColumns
        FormatCsvField(GetCurrentDateString()), // Adding the current date
 	FormatCsvField(modelName) // Adding the model name
    }))
);

// Process Measures
var measuresData = string.Join("\n",
    Model.AllMeasures.Select(m => string.Join(",", new string[]{
        FormatCsvField(m.ObjectType.ToString()),
        FormatCsvField(m.Table.Name),
        FormatCsvField(m.Name),
        FormatCsvField(m.FormatString),
        FormatCsvField(m.DisplayFolder),
        FormatCsvField(m.Description),
        FormatCsvField(m.IsHidden.ToString()),
        FormatCsvField(m.Expression),
        FormatCsvField(GetCurrentDateString()), // Adding the current date
 	FormatCsvField(modelName) // Adding the model name
    }))
);

// Process Hierarchies
var hierarchiesData = string.Join("\n",
    Model.AllHierarchies.Select(m => string.Join(",", new string[]{
        FormatCsvField(m.ObjectType.ToString()),
        FormatCsvField(m.Table.Name),
        FormatCsvField(m.Name),
        "", // FormatString is not applicable for Hierarchies
        FormatCsvField(m.DisplayFolder),
        FormatCsvField(m.Description),
        FormatCsvField(m.IsHidden.ToString()),
        "",  // Expression is not applicable for Hierarchies
        FormatCsvField(GetCurrentDateString()), // Adding the current date
 	FormatCsvField(modelName) // Adding the model name
    }))
);

// Process Levels
var levelsData = string.Join("\n",
    Model.AllLevels.Select(m => string.Join(",", new string[]{
        FormatCsvField(m.ObjectType.ToString()),
        FormatCsvField(m.Table.Name),
        FormatCsvField(m.Name),
        "", // FormatString is not applicable
        "", // DisplayFolder is not applicable
        FormatCsvField(m.Description),
        "", // isHidden is not applicable
        "", // Expression is not applicable
        FormatCsvField(GetCurrentDateString()), // Adding the current date
 	FormatCsvField(modelName) // Adding the model name
    }))
);

// Process Partitions
var partitionsData = string.Join("\n",
    Model.AllPartitions.Select(m => string.Join(",", new string[]{
        FormatCsvField(m.ObjectType.ToString()),
        FormatCsvField(m.Table.Name),
        FormatCsvField(m.Name),
        "", // FormatString is not applicable
        "", // DisplayFolder is not applicable
        FormatCsvField(m.Description),
        "", // isHidden is not applicable
        FormatCsvField(m.Expression),
        FormatCsvField(GetCurrentDateString()), // Adding the current date
 	FormatCsvField(modelName) // Adding the model name
    }))
);
// Process KPIs
var kpiData = string.Join("\n",
    Model.AllKPIs.Select(m => string.Join(",", new string[]{
        FormatCsvField(m.ObjectType.ToString()),
        FormatCsvField(m.Table.Name),
        FormatCsvField(m.Name),
        "", // FormatString is not applicable
        "", // DisplayFolder is not applicable
        FormatCsvField(m.Description),
        "", // isHidden is not applicable
        FormatCsvField(m.Expression),
        FormatCsvField(GetCurrentDateString()), // Adding the current date
 	FormatCsvField(modelName) // Adding the model name
    }))
);

// Combine all non-null and non-empty data
var combinedData = new[] { calculationgroupData, columnsData, measuresData, hierarchiesData, levelsData, partitionsData, kpiData  };
var csvContent = header + string.Join("\n", combinedData.Where(data => !string.IsNullOrEmpty(data)));
// Write to CSV file - Identify folder within initial Base folder for Model details
var filePath = $@"C:\Report Backups\Model Backups\{modelName}.csv";
System.IO.File.WriteAllText(filePath, csvContent);