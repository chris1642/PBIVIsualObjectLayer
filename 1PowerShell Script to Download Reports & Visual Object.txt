# Define the base folder and script paths at the beginning of the script
$baseFolderPath = "C:\Power BI Backups"
$TabularEditor2Path = "C:\Program Files (x86)\Tabular Editor\TabularEditor.exe"
$Script1Path = "$baseFolderPath\Tabular Editor Visual Object Layer Script.csx"

# Define workspace ID from desired Power BI Workspace
$workspaceid = "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"

# Check and set the execution policy
$currentPolicy = Get-ExecutionPolicy -Scope CurrentUser
if ($currentPolicy -eq 'Restricted' -or $currentPolicy -eq 'Undefined' -or $currentPolicy -eq 'AllSigned') {
    Write-Host "Current execution policy is restrictive: $currentPolicy. Attempting to set to RemoteSigned."
    Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
    Write-Host "Execution policy set to RemoteSigned."
} else {
    Write-Host "Current execution policy is sufficient: $currentPolicy."
}

# Ensure required modules are installed, and imports them. If import fails, error and exit early
$requiredModules = @( 'ImportExcel', 'MicrosoftPowerBIMgmt' )
foreach ($module in $requiredModules) {
    if( -not (Import-Module $module -PassThru -EA ignore) ) {
       Install-Module -Name $module -Scope CurrentUser -Force
    }

    Import-Module $Module -ErrorAction 'stop' # In the rare case Install-Module fails, you probably want a terminating error
}

# Login to Power BI
Login-PowerBI

$reports = Get-PowerBIReport -WorkspaceId $workspaceid

# Define the report backups path
$reportBackupsPath = Join-Path -Path $baseFolderPath -ChildPath "Report Backups"

# Check if the "Report Backups" folder exists, if not create it
if (-not (Test-Path -Path $reportBackupsPath)) {
    New-Item -Path $reportBackupsPath -ItemType Directory
}

$date = (Get-Date -UFormat "%Y-%m-%d")

# Create a new folder for the backups
$new_date_folder = Join-Path -Path $reportBackupsPath -ChildPath $date
New-Item -Path $new_date_folder -ItemType Directory -Force

# Export each report in the workspace
foreach ($report in $reports) {
    $filename = $report.Name -replace "[^a-zA-Z0-9\(\)&.-]", " " # Clean up the file name
    $filename = $filename.TrimStart() # Remove leading spaces if any
    $filename = "$filename.pbix"
    $filepath = Join-Path -Path $new_date_folder -ChildPath $filename
    Export-PowerBIReport -Id $report.Id -OutFile $filepath
}

Write-Output "Reports exported to $new_date_folder"

# Start Tabular Editor process
$p = Start-Process -filePath "$TabularEditor2Path" -Wait -NoNewWindow -PassThru `
       -ArgumentList "`"$baseFolderPath\Blank Model.bim`" -S `"$Script1Path`" -B `"localhost\tabular`" `"MyModel`""


# Define the output Excel file path in the parent folder
$outputExcelFile = Join-Path -Path $baseFolderPath -ChildPath "VisualObjectLayer.xlsx"

# Get the latest folder by date
$latestDateFolder = Get-ChildItem -Path $reportBackupsPath -Directory |
    Where-Object { $_.Name -match '^\d{4}-\d{2}-\d{2}$' } |  # Filter for folders with a date pattern
    Sort-Object { [datetime]::Parse($_.Name) } -Descending | # Sort by date, descending
    Select-Object -First 1

if ($latestDateFolder) {
    $newDateFolder = $latestDateFolder.FullName
    Write-Output "Using the latest dated folder: $newDateFolder"
} else {
    Write-Error "No valid dated folders found in 'Report Backups'."
    exit
}

foreach ($txtFile in (Get-ChildItem -Path $newDateFolder -Filter *.txt)) {
    # Get the base name of the file (without extension) for the worksheet name
    $worksheetName = [System.IO.Path]::GetFileNameWithoutExtension($txtFile.FullName)
    
    # Import the TXT file, assuming it's tab-delimited
    $txtData = Get-Content -Path $txtFile.FullName -Encoding UTF8 | ConvertFrom-Csv -Delimiter "`t"

    if ($excelExists) {
        # Append data to the existing Excel file
        $txtData | Export-Excel -Path $outputExcelFile -WorksheetName $worksheetName -AutoNameRange -Append
    } else {
        # Create a new Excel file with the data
        $txtData | Export-Excel -Path $outputExcelFile -WorksheetName $worksheetName -AutoNameRange
        $excelExists = $true
    }
}

    Write-Output "TXT files appended to $outputExcelFile"
 
